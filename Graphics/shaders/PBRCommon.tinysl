Share
{
    // PBR shading
    float DistributionGGX(float NdotH, float roughness)
    {
        float a = roughness * roughness;
        float a2 = a * a;
        float NdotH2 = NdotH * NdotH;
        float num = a2;
        float denom = (NdotH2 * (a2 - 1.0) + 1.0);
        denom = PI * denom * denom;
        return num / denom;
    }

    float GeometrySchlickGGX(float NdotV, float k)
    {
        // float nom = NdotV;
        // float denom = NdotV * (1.0 - k) + k;
        // return nom / denom;
        return 1 / mix(NdotV, 1, k);
    }

    float GeometrySmith(float NdotV, float NdotL, float roughness)
    {
        float r = (roughness * roughness + 1.0);
        float k = (r * r) / 8.0;
        float ggx2 = GeometrySchlickGGX(NdotV, k);
        float ggx1 = GeometrySchlickGGX(NdotL, k);
        return ggx1 * ggx2;
    }

    vec3 FresnelSchlick(float cosTheta, vec3 F0)
    {
        return F0 + (1 - F0) * pow(1 - cosTheta, 5);
    }

    vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
    {
        return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
    }

    vec3 directBRDF(float NdotV, float NdotL, float NdotH, float roughness, vec3 f)
    {
        float d = DistributionGGX(NdotH, roughness);
        // return vec4(d, d, d, 0);
        float g = GeometrySmith(NdotV, NdotL, roughness);

        float denominator = 4.0/* * max(dot(normal, view), 0) * max(dot(normal, l), 0)*/;
        return d * f * g / denominator;
    }

    // Pre-convolute related
    vec3 ImportanceSampleGGX(vec2 Xi, vec3 normal, float roughness)
    {
        float a = roughness * roughness;
        float phi = PI * 2 * Xi.x;
        float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
        float sinTheta = sqrt(1 - cosTheta * cosTheta);

        // tangent space dir
        vec3 up = vec3(0, 1, 0);
        vec3 front = normalize(cross(normal, up));
        vec3 right = normalize(cross(normal, front));

        if (abs(normal.y) > 0.5)
        {
            right = vec3(1, 0, 0);
            front = normalize(cross(right, normal));
            right = normalize(cross(normal, front));
        }
        vec3 dir = vec3(sinTheta * cos(phi), cosTheta, sinTheta * sin(phi));
        return normalize(dir.x * right + dir.y * normal + dir.z * front);
    }

    float RadicalInverse_VdC(uint bits) 
    {
        bits = (bits << 16u) | (bits >> 16u);
        bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
        bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
        bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
        bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
        return float(bits) * 2.3283064365386963e-10; // / 0x100000000
    }
    // Low Discrepancy Sequnce
    vec2 Hammersley(uint i, uint N)
    {
        return vec2(float(i)/float(N), RadicalInverse_VdC(i));
    }
}